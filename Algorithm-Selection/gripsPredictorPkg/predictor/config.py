'''Algorithm Predictor has a lot of parameters used to influence package's
functionalities that are controled using this module. In general, all parameters
can be divided into two groups:

- User defined parameters - parameters that are assigned with value that user provides and
- Derived parameters - whose values are somehow calculated from user defined parameters and
  should not never be changed manually.

Many of Algorithm Predictor's parameters can be changed using configuration module.
Following table shows all parameters that can be changed using configuration module
and their default values:

========================= ================================================== ======================================================================================================================================
        Parameters        Default value                                      Description
========================= ================================================== ======================================================================================================================================
alpha_time                10                                                 Value of shift used when calculating shifted geometric mean using time data.
alpha_pdi                 1000                                               Value of shift used when calculating shifted geometric mean using primal-dual integral data.
actual_time_data_fullpath ROOT_DIRPATH/data/performance/actual/time_data.csv Full path to the file containing time performance data.
actual_pdi_data_fullpath  ROOT_DIRPATH/data/performance/actual/pdi_data.csv  Full path to the file containing primal-dual integral performance data.
predicted_data_dir        ROOT_DIRPATH/data/performance/data                 Full path to the directory containing data produced by classifiers that used for performance measurement.
algorithm_type_predicted  best                                               How to choose algorithm from a predicted portfolio (per instance).
algorithm_type_referent   default                                            Which algorithm will be used for a referent value to compare predicted portfolio with.
finvestig_images_dir      ROOT_DIRPATH/data/feature_investigator/images      Full path to the directory containing the images produced by feature investigator.
finvestig_data_dir        ROOT_DIRPATH/data/feature_investigator/data        Full path to the directory containing all other data produced by feature investigator.
finvestig_results_dir     ROOT_DIRPATH/data/feature_investigator/results     Full path to the directory containing the results produced by by feature investigator.
models_dir                ROOT_DIRPATH/data/models                           Full path to the directory where trained models are serialized and loaded from.
models_images_dir         ROOT_DIRPATH/data/models/images                    Full path to the directory containing the images produced by models.
models_data_dir           ROOT_DIRPATH/data/models/data                      Full path to the directory containing all other data produced by models.
models_results_dir        ROOT_DIRPATH/data/models/results                   Full path to the directory containing the results produced by models.
models_test_dir           ROOT_DIRPATH/data/models/test                      Full path to the directory containing a test data produced by models.
plot_data_dir             ROOT_DIRPATH/data/performance/plot_data            Full path to the directory where all files produced by performance measurement will be stored.
plots_dir                 ROOT_DIRPATH/data/performance/plots                Full path to the directory where all plots generated by :py:mod:`~predictor.performance.visualisation.plotter` module are stored.
plots_list_filename       plots_list                                         Default name that is used when creating and loading list of curves to be plotted on a plot.
plot_name                 plot                                               Default prefix that will be used when generating any plot name.
show_plot                 True                                               Determines if plot will be showed right after it is created.
plot_file_format          svg                                                Default plot file format.
========================= ================================================== ======================================================================================================================================

.. warning::
  Currently, there are some configuration properties that are redundant. Those
  are related to the feature investigator, models and performance directories.
  In future releases, this directories and related properties will be removed!

In previously shown table, ROOT_DIRPATH represents path to the root directory of
Algorithm Predictor package data directory and all its subdirectories already
exist in root directory and must not be deleted in order to keep default configuration.

Let's say that now we want to call some functionality that depends on some of the
parameters. There are three ways to change parameter's value:

- By passing new value as an function argument - in this case, corresponding parameter's
  value from configuration is not changed and value passed as function argument is
  used instead, but just for that function call. This option is not available for
  all functions.
- By calling :py:meth:`~predictor.config.Config.set_parameter` function of
  :py:class:`~predictor.config.Config` class. This function changes
  value of just one, specified configuration parameter in configuration object.
  Unlike the previous point, changes made in this way are present and after
  function ``set_parameter`` finished its execution.
- By calling :py:meth:`~predictor.config.Config.load_from_file` function of :py:meth:`~predictor.config.Config`
  class. This function changes values of all parameters present in a configuration
  file. New parameters values are preserved until the configuration object is destroyed
  or it's parameters values are changed by another function call.
'''

import os
import sys
import yaml
import pandas as pd

from . import logger
from .performance.metric import sgm

ROOT_DIRPATH = os.path.abspath(
                    os.path.join(
                        os.path.dirname(__file__),
                        '..'
                    )
                )

log = logger._Logger.get_logger(__name__) # set module name for logging

class DefaultParameterValues(object):
    '''This class contains default values for configuration parameters. In order
    to change some default value, you should change equaly named field from this
    class.
    '''

    alpha_time                = 10
    alpha_pdi                 = 1000
    actual_time_data_fullpath = os.path.abspath(
                                    os.path.join(ROOT_DIRPATH, 'data/performance/actual/time_data.csv'))
    actual_pdi_data_fullpath  = os.path.abspath(
                                    os.path.join(ROOT_DIRPATH, 'data/performance/actual/pdi_data.csv'))
    predicted_data_dir        = os.path.abspath(
                                    os.path.join(ROOT_DIRPATH, 'data/performance/data'))
    algorithm_type_predicted  = 'best'
    algorithm_type_referent   = 'default'

    # feature investigator default values
    finvestig_images_dir  = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/feature_investigator/images'))
    finvestig_data_dir    = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/feature_investigator/data'))
    finvestig_results_dir = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/feature_investigator/results'))

    # models module default values
    models_dir            = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/models'))
    models_images_dir     = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/models/images'))
    models_data_dir       = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/models/data'))
    models_results_dir    = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/models/results'))
    models_test_dir       = os.path.abspath(
                                os.path.join(ROOT_DIRPATH, 'data/models/test'))

    # plotter default values
    plot_data_dir       = os.path.abspath(
                            os.path.join(ROOT_DIRPATH, 'data/performance/plot_data'))
    plots_dir           = os.path.abspath(
                            os.path.join(ROOT_DIRPATH, 'data/performance/plots'))
    plots_list_filename = 'plots_list'
    plot_name           = 'plot'
    show_plot           = False
    plot_file_format    = 'svg'

class Config(object):
    '''Central configuration class used to store and set almost all parameters used
    in Algorithm Predictor package. It is used for setting parameters of following
    modules:

    - :py:mod:`~predictor.performance.measurement` from performance subpackage
    - :py:mod:`~predictor.performance.visualisation.plotter` from visualisation subpackage
    - :py:mod:`~predictor.logger` from predictor package
    - :py:mod:`~predictor.feature_investigator.correlations` from feature_investigator subpackage
    - :py:mod:`~predictor.feature_investigator.mds` from feature_investigator subpackage
    - :py:mod:`~predictor.feature_investigator.pca` from feature_investigator subpackage
    - :py:mod:`~predictor.feature_investigator.rfr` from feature_investigator subpackage
    - :py:mod:`~predictor.models.random_forest_regressor` from models subpackage
    - :py:mod:`~predictor.models.hydra` from models subpackage
    '''

    def __init__(self, config_file_path = None):
        '''
        Initializes user defined parameters to their default values and sets
        derived parameters according to values of user defined parameters.

        :param config_file_path: Full path to a file containing configuration
            in YAML format. File name must be passed together with extension (.yml).
        '''
        super(Config, self).__init__()

        # data that is derived from user input data
        self._calculate_actual_value    = None
        self._calculate_predicted_value = None
        '''Some Description.'''
        self._naive_time_best           = None
        self._naive_pdi_best            = None

        # configuration settings that has to be reloaded every time when
        # is performed switch from time to pdi or vice versa
        self._alpha                    = None
        '''Contains value of currently used alpha (alpha_time or alpha_pdi).'''
        self._actual_data              = None
        '''Some useless comment'''

        # data that can be retrieved directly from configuration file
        self.alpha_time                = DefaultParameterValues.alpha_time
        '''Value of shift when shifted geometric mean is calculated on time data.'''
        self.alpha_pdi                 = DefaultParameterValues.alpha_pdi
        '''Value of shift when shifted geometric mean is calculated on primal-dual integral data.'''
        self.actual_time_data_fullpath = DefaultParameterValues.actual_time_data_fullpath
        '''Fullpath to the file containing execution time data for problem instances.'''
        self.actual_pdi_data_fullpath  = DefaultParameterValues.actual_pdi_data_fullpath
        '''Fullpath to the file containing execution primal-dual integral data for problem instances.'''
        self.predicted_data_dir        = DefaultParameterValues.predicted_data_dir
        '''Path to the directory containing files produced by model training with portfolio predictions instances in a training set.'''
        self.algorithm_type_predicted  = DefaultParameterValues.algorithm_type_predicted
        '''Determines which algorithm will be choosen from predicted portfolio.'''
        self.algorithm_type_referent   = DefaultParameterValues.algorithm_type_referent
        '''Determines which algorithm will be choosen for comparison with choosen predicted one.'''
        self.actual_time_data          = None
        '''Data frame representing file content located on :py:attr:`~predictor.config.Config.actual_time_data_fullpath`.'''
        self.actual_pdi_data           = None
        '''Data frame representing file content located on :py:attr:`~predictor.config.Config.actual_pdi_data_fullpath`.'''

        # calculate rest of the values from user input values
        self._set_predicted_value_evaluation()
        self._set_actual_value_evaluation()
        self.actual_time_data, self._naive_time_best = \
            self._init_actual_data(self.actual_time_data_fullpath, self.alpha_time)
        self.actual_pdi_data, self._naive_pdi_best = \
            self._init_actual_data(self.actual_pdi_data_fullpath, self.alpha_pdi)

        # plotter settings
        self.plot_data_dir             = DefaultParameterValues.plot_data_dir
        self.plots_dir                 = DefaultParameterValues.plots_dir
        self.plots_list_filename       = DefaultParameterValues.plots_list_filename
        self.plot_name                 = DefaultParameterValues.plot_name
        self.show_plot                 = DefaultParameterValues.show_plot
        self.plot_file_format          = DefaultParameterValues.plot_file_format

        # feature investigator settings
        self.finvestig_images_dir      = DefaultParameterValues.finvestig_images_dir
        self.finvestig_data_dir        = DefaultParameterValues.finvestig_data_dir
        self.finvestig_results_dir     = DefaultParameterValues.finvestig_results_dir

        # models settings
        self.models_dir                = DefaultParameterValues.models_dir
        self.models_images_dir         = DefaultParameterValues.models_images_dir
        self.models_data_dir           = DefaultParameterValues.models_data_dir
        self.models_results_dir        = DefaultParameterValues.models_results_dir
        self.models_test_dir           = DefaultParameterValues.models_test_dir

        if config_file_path is not None:
            self.load_from_file(config_file_path)

    def __str__(self):
        return \
            '\n alpha                     = ' + str(self._alpha) + \
            '\n alpha_time                = ' + str(self.alpha_time) + \
            '\n alpha_pdi                 = ' + str(self.alpha_pdi) + \
            '\n algorithm_type_predicted  = ' + str(self.algorithm_type_predicted) + \
            '\n alpha_type_referent       = ' + str(self.algorithm_type_referent) + \
            '\n actual_time_data_fullpath = ' + str(self.actual_time_data_fullpath) + \
            '\n actual_time_data          = ' + ('Set' if self.actual_time_data is not None else 'Not set') + \
            '\n naive_time_best           = ' + str(self._naive_time_best) + \
            '\n actual_pdi_data_fullpath  = ' + str(self.actual_pdi_data_fullpath) + \
            '\n actual_pdi_data           = ' + ('Set' if self.actual_pdi_data is not None else 'Not set') + \
            '\n naive_pdi_best            = ' + str(self._naive_pdi_best) + \
            '\n predicted_data_dir        = ' + str(self.predicted_data_dir) + \
            '\n plot_data_dir             = ' + str(self.plot_data_dir) + \
            '\n plots_dir                 = ' + str(self.plots_dir) + \
            '\n plots_list_filename       = ' + str(self.plots_list_filename) + \
            '\n plot_name                 = ' + str(self.plot_name) + \
            '\n show_plot                 = ' + ('Yes' if self.show_plot is True else 'No') + \
            '\n plot_file_format          = ' + str(self.plot_file_format) + \
            '\n finvestig_images_dir      = ' + str(self.finvestig_images_dir) + \
            '\n finvestig_data_dir        = ' + str(self.finvestig_data_dir) + \
            '\n finvestig_results_dir     = ' + str(self.finvestig_results_dir) + \
            '\n models_dir                = ' + str(self.models_dir) + \
            '\n models_images_dir         = ' + str(self.models_images_dir) + \
            '\n models_data_dir           = ' + str(self.models_data_dir) + \
            '\n models_results_dir        = ' + str(self.models_results_dir) + \
            '\n models_test_dir           = ' + str(self.models_test_dir)

    def _set_predicted_value_evaluation(self):
        '''Sets function that will be used for selecting one algorithm amongst
        an array of predicted algorithms according to the value of user defined
        :py:attr:`~predictor.config.Config.algorithm_type_predicted` and
        :py:attr:`~predictor.config.Config.actual_data_type` configuration
        parameters.

        Possible values for :py:attr:`~predictor.config.Config.actual_data_type`
        parameter:

            - **time** - time data will be used for further calculations
            - **primal-dual integral** - primal-dual integral data will be used for
                                     further calculations

        Possible values for :py:attr:`~predictor.config.Config.algorithm_type_predicted`
        parameter:

        - **naive** - returns a function that always selects algorithm with the best
                  shifted geometric mean value amongst an array of predicted algotihms
                  for a given instance. The function returns that value.
        - **best** - returns a function that selects algoritm with minimal value of
                 metric stored in :py:attr:`~predictor.config.Config.actual_data_type`
                 amongst an array of predicted algorithms for a given instance.
                 The function returns that value.
        '''
        if self.algorithm_type_predicted == 'naive':
            self._calculate_predicted_value = \
                lambda actual_data, instance, algorithms: \
                [ self._naive_time_best if self.actual_data_type == 'time' else self._naive_pdi_best ]
        else:
            self._calculate_predicted_value = \
            lambda actual_data, instance, algorithms: \
            [ min([ actual_data.loc[instance, algorithm] for algorithm in algorithms ]) ]

    def _set_actual_value_evaluation(self):
        '''Sets function that will be used for selecting one algorithm amongst
        an array of actual algorithms according to the value of user defined
        :py:attr:`~predictor.config.Config.algorithm_type_referent` and
        :py:attr:`~predictor.config.Config.actual_data_type` configuration
        parameters.

        Possible values for :py:attr:`~predictor.config.Config.actual_data_type`
        parameter:

            - **time** - time data will be used for further calculations
            - **primal-dual integral** - primal-dual integral data will be used for
                                         further calculations

        Possible values for :py:attr:`~predictor.config.Config.algorithm_type_referent`
        parameter:

        - **best** - returns a function that always selects algorithm with minimal value
                 of time or primal-dual integral from an array of algorithms. The
                 function returns value of time or primal-dual integral for selected
                 algorithm and given instance.
        - **default** - returns a function that always selects algorithm with name
                    'default'. The function returns the value of time or primal-dual
                    integral for default algorithm and given instance.
        - **naive** - returns a function that always selects algorithm with minimal
                  value of shifted geometric mean. The function returns the value
                  time or primal-dual integral for selected algorithm and given
                  instance.
        - **random_and_default** - NOT IMPLEMENTED.
        '''
        if self.algorithm_type_referent == 'best':
            self._calculate_actual_value = \
            lambda actual_data, instance: [ actual_data.loc[instance, :].min() ]
        elif self.algorithm_type_referent == 'default':
            self._calculate_actual_value = \
            lambda actual_data, instance: [ actual_data.loc[instance, 'default'] ]
        elif self.algorithm_type_referent == 'naive':
            self._calculate_actual_value = \
            lambda actual_data, instance: \
            [ self._naive_time_best if self.actual_data_type == 'time' else self._naive_pdi_best ]
        elif self.algorithm_type_referent == 'random_and_default':
            raise NotImplementedError
        else:
            raise NotImplementedError

    def _init_actual_data(self, actual_data_fullpath, alpha):
        '''Initialize configuration parameters ``actual_xyz_data`` and
        ``_naive_xyz_best`` based on CSV file with time or primal-dual
        integral execution data. xyz can be time or primal-dual.

        This method reads CSV file from :py:attr:`~predictor.config.Config.actual_data_fullpath`
        location and calcluates shifted geometric mean for each algorithm in file.
        Input file must have algorithm names as first row and instance names as
        a first column. On intersection of every instance and algorithm must be
        a value representing eather time or value of primal-dual integral measured
        for the instance solved with that algorithm.

        :param actual_data_fullpath: Full path to the file with execution data for
            each instance and algorithm.
        :param alpha: Value that is used to shift geometric mean.

        :return:

            - actual_data - content of input CSV file in form of a Pandas dataframe.
            - minimal value of shifted geometric mean values calculated per algorithm
              from input CSV file.
        '''
        # inicialization of actual time data based on values in time data file
        try:
            actual_data = pd.read_csv(actual_data_fullpath, index_col = 0)
        except FileNotFoundError:
            log.error("File %s is not found!" % actual_data_fullpath)
            sys.exit(1)

        # calculates shifted geometric mean over time data for each algorithm
        # based on actual time data
        average = []
        data_df = pd.DataFrame( actual_data )
        for column in data_df[data_df.columns]:
            average.append(
                sgm.shifted_geometric_mean(
                    iterable = data_df[column],
                    alpha = alpha
                )
            )
        return [actual_data, min(average)]

    def set_parameter(self, param, value):
        '''Set configuration parameter to specified value. If nonexisting parameter
        name is passed, none parameter will be changed.

        :param param: Name of configuration parameter to be changed.
        :param value: New value of configuration parameter.

        :return: New value of configuration parameter.
        '''
        if param == 'alpha_time':
            self.alpha_time = value
        elif param == 'alpha_pdi':
            self.alpha_pdi = value
        elif param == 'algorithm_type_predicted':
            self.algorithm_type_predicted = value
            self._set_predicted_value_evaluation()
        elif param == 'algorithm_type_referent':
            self.algorithm_type_referent = value
            self._set_actual_value_evaluation()
        elif param == 'actual_time_data_fullpath':
            if self.alpha_time is None:
                raise ValueError('In order to define this parameter, you first must define ALPHA_TIME parameter.')
            self.actual_time_data_fullpath = value
            self.actual_time_data, self._naive_time_best = \
                self._init_actual_data(self.actual_time_data_fullpath, self.alpha_time)
        elif param == 'actual_pdi_data_fullpath':
            if self.alpha_pdi is None:
                raise ValueError('In order to define this parameter, you first must define ALPHA_PDI parameter.')
            self.actual_pdi_data_fullpath = value
            self.actual_pdi_data, self._naive_pdi_best = \
                self._init_actual_data(self.actual_pdi_data_fullpath, self.alpha_pdi)
        elif param == 'predicted_data_dir':
            self.predicted_data_dir = value
        elif param == 'plot_data_dir':
            self.plot_data_dir = value
        elif param == 'plots_dir':
            self.plots_dir = value
        elif param == 'plots_list_filename':
            self.plots_list_filename = value
        elif param == 'plot_name':
            self.plot_name = value
        elif param == 'show_plot':
            self.show_plot = value
        elif param == 'plot_file_format':
            self.plot_file_format = value
        elif param == 'finvestig_images_dir':
            self.finvestig_images_dir = value
        elif param == 'finvestig_data_dir':
            self.finvestig_data_dir = value
        elif param == 'finvestig_results_dir':
            self.finvestig_results_dir = value
        elif param == 'models_images_dir':
            self.models_images_dir = value
        elif param == 'models_dir':
            self.models_dir = value
        elif param == 'models_data_dir':
            self.models_data_dir = value
        elif param == 'models_results_dir':
            self.models_results_dir = value
        elif param == 'models_test_dir':
            self.models_test_dir = value

        return value

    def is_parameter_undefined(self, param):
        '''Check if configuration parameter has ``None`` value. In case of nonexisting
        parameter, ``False`` is returned.

        :param param: Name of configuration parameter to be changed.

        :return: True if specified configuration parameter is undefined, otherwise
            False.
        '''
        if param == 'alpha_time' and self.alpha_time is None:
            return True
        if param == 'alpha_pdi' and self.alpha_pdi is None:
            return True
        if param == 'algorithm_type_predicted' and self.algorithm_type_predicted is None:
            return True
        if param == 'algorithm_type_referent' and self.algorithm_type_referent is None:
            return True
        if param == 'actual_time_data_fullpath' and self.actual_time_data is None:
            return True
        if param == 'actual_pdi_data_fullpath' and self.actual_pdi_data is None:
            return True
        if param == 'predicted_data_dir' and self.predicted_data_dir is None:
            return True
        if param == 'plot_data_dir' and self.plot_data_dir is None:
            return True
        elif param == 'plots_dir' and self.plots_dir is None:
            return True
        elif param == 'plots_list_filename' and self.plots_list_filename is None:
            return True
        elif param == 'plot_name' and self.plot_name is None:
            return True
        elif param == 'show_plot' and self.show_plot is None:
            return True
        elif param == 'plot_file_format' and self.plot_file_format is None:
            return True
        elif param == 'finvestig_images_dir' and self.finvestig_images_dir is None:
            return True
        elif param == 'finvestig_data_dir' and self.finvestig_data_dir is None:
            return True
        elif param == 'finvestig_results_dir' and self.finvestig_results_dir is None:
            return True
        elif param == 'models_images_dir' and self.models_images_dir is None:
            return True
        elif param == 'models_dir' and self.models_dir is None:
            return True
        elif param == 'models_data_dir' and self.models_data_dir is None:
            return True
        elif param == 'models_results_dir' and self.models_results_dir is None:
            return True
        elif param == 'models_test_dir' and self.models_test_dir is None:
            return True
        return False

    def load_from_file(self, config_file_path):
        '''Loads configuration from file and updates central configuration object
        according to configuration file.

        Configuration file has to be in YAML format. Only parameters with values
        specified in configuration file are updated.

        :param config_file_path: Full path to the configuration file. Filename must
            include ``.yml`` extension.
        '''
        with open(config_file_path, 'r') as ymlfile:
            cfg = yaml.load(ymlfile)
        for key, value in cfg.items():
            self.set_parameter(key, value)

    def save_parameter(self, output, parameter, value):
        '''Save value of one configuration parameter to configuration file.

        :param output: File object reporesenting output configuration file.
        :param parameter: Name of the parameter that will be written to the configuration
            file.
        :param value: Value of the parameter.
        '''
        if (self.is_parameter_undefined(parameter)) is False:
            output.write(parameter + ': ' + str(value) + '\n')

    def save_to_file(self, config_file_path = '.', config_file_name = 'configuration'):
        '''Save current configuration to the configuration file for later use.

        Function serializes values of all user defined parameters to the file on
        :py:attr:`~predictor.config.Config.config_file_path` location.

        :param config_file_path: Path to the directory where configuration file will
            be saved. If not defined, configuration file will be saved into current
            directory.
        :param config_file_name: Name of the configuration file. String representing
            the name should not have an extension (it will be appended automatically).
            If not defined, configuration file will have default name configuration.
        '''

        config_file_fullpath = os.path.join(config_file_path, config_file_name + '.yml')
        with open(config_file_fullpath, 'w') as output:
            self.save_parameter(output, 'alpha_time', self.alpha_time)
            self.save_parameter(output, 'alpha_pdi', self.alpha_pdi)
            self.save_parameter(output, 'algorithm_type_predicted', self.algorithm_type_predicted)
            self.save_parameter(output, 'algorithm_type_referent', self.algorithm_type_referent)
            self.save_parameter(output, 'actual_time_data_fullpath', self.actual_time_data_fullpath)
            self.save_parameter(output, 'actual_pdi_data_fullpath', self.actual_pdi_data_fullpath)
            self.save_parameter(output, 'predicted_data_dir', self.predicted_data_dir)
            self.save_parameter(output, 'plot_data_dir', self.plot_data_dir)
            self.save_parameter(output, 'plots_dir', self.plots_dir)
            self.save_parameter(output, 'plots_list_filename', self.plots_list_filename)
            self.save_parameter(output, 'plot_name', self.plot_name)
            self.save_parameter(output, 'show_plot', self.show_plot)
            self.save_parameter(output, 'plot_file_format', self.plot_file_format)
            self.save_parameter(output, 'finvestig_images_dir', self.finvestig_images_dir)
            self.save_parameter(output, 'finvestig_data_dir', self.finvestig_data_dir)
            self.save_parameter(output, 'finvestig_results_dir', self.finvestig_results_dir)
            self.save_parameter(output, 'models_dir', self.models_dir)
            self.save_parameter(output, 'models_images_dir', self.models_images_dir)
            self.save_parameter(output, 'models_data_dir', self.models_data_dir)
            self.save_parameter(output, 'models_results_dir', self.models_results_dir)
            self.save_parameter(output, 'models_test_dir', self.models_test_dir)

    def reload(self, actual_data_type):
        '''Recalculate values of :py:attr:`~predictor.config.Config._alpha` and
        :py:attr:`~predictor.config.Config._actual_data` used for measurement
        functions from :py:mod:`~predictor.performance.measurement` module.

        This function should be called before performance evaluation in order to
        set if time or primal-dual integral files (and corresponding configuration
        parameters) will be used for performance measurement. Even if it is not
        always necessary, it is recommended to call this function every time before
        performance measurement, just to make sure that you are using right files
        for evaluation.

        :param actual_data_type: Can have values ``time`` or ``pdi`` (for primal-dual
            integral). Determines if time or primal-dual integral files will be
            used for evaluation.
        '''
        if actual_data_type == 'time':
            self._alpha       = self.alpha_time
            self._actual_data = self.actual_time_data
        else:
            self._alpha       = self.alpha_pdi
            self._actual_data = self.actual_pdi_data

    def check_required_params(self, required_params):
        '''Check if all configuration parameters from the list are set.

        :param required_params: List of parameter names whose values should be checked.
        :return: True if all parameters are set or False if at least one parameter
                 is not set.
        '''
        return ( False in [ is_parameter_undefined(param) for param in params ] )

global_config = Config()
